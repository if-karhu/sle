@model LinkedList<Tuple<SortedDictionary<String, double>, double>>

@using System.Text;

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <script type="text/javascript"
            src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
    </script>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <div>
        <p>Input format: d1X1 + d2X2 + ... + dnXn = f  where d1..dn - coefficients, X1..Xn - unknown names (digits are not allowed), f - constant term.<br/> 
         Any whitespace character will be ignored while parsing. <br/>
         Sample: -x + 3.14y+ 0z =0.123
        </p>

      @if (Model.Count > 0){
            @Html.Raw("<math xmlns=\"http://www.w3.org/1998/Math/MathML\">");
            @Html.Raw("<mo>&#123;</mo>   <!--curly brace-->  <mtable>");
            }
            @foreach (Tuple<SortedDictionary<String, double>, double> equation in Model) {  
                @Html.Raw("<mtr><mtd>");
                bool emitFirstSign = true;
                foreach (KeyValuePair<string, double> kv in equation.Item1) {
                             if (kv.Value >= 0) {
                                if (!emitFirstSign){
                                    @Html.Raw("<mo>&#43;<!--PLUS--></mo>");
                                }
                             } else {
                                @Html.Raw("<mo>&#45;<!--MINU--></mo>");
                             }
                             emitFirstSign = false;
                             @Html.Raw("<mn>" + (Math.Abs(kv.Value)) + "</mn>");
                             @Html.Raw("<mi>" + kv.Key + "</mi>");
                            }

                @Html.Raw("<mo>&#61;<!--EQUAL--></mo>");
                @Html.Raw("<mn>" + (equation.Item2) + "</mn>");
                @Html.Raw("</mtr></mtd>");
                        }
            
            
            @if (Model.Count > 0){
                @Html.Raw("</mtable>");
                @Html.Raw("</math>");
              }
              
        <br/>
        <br/>

        @if (ViewBag.Exception != null) {
            <div id="error_message" style="color:peru">
                <text>@Html.Raw(ViewBag.Exception)</text>
            </div>
        }
        
        @if (ViewBag.Solution != null) {
            @Html.Raw("<math xmlns=\"http://www.w3.org/1998/Math/MathML\">");
            int i = 0;
            foreach (Tuple<String, double> res in ViewBag.Solution) {             
                @Html.Raw("<mi>" + res.Item1 + "</mi>");
                @Html.Raw("<mo>&#61;<!--EQUAL--></mo>");
                @Html.Raw("<mn>" + res.Item2 + "</mn>");
                if (i != (ViewBag.Solution.Count - 1)) {
                    @Html.Raw("<mn>,</mn><mspace width=\"10px\" />");
                }
                i++;
                                                       
            }
            @Html.Raw("</math>");
        }

</div>
    <div>
        <br />
        <br />
        @using (Html.BeginForm("Index","Sle",FormMethod.Post)){
            <input type="text" name="parseMe" autocomplete="off" required/>
            <input type="submit" value="Add equation" />
        }
        @using (Html.BeginForm("Solve", "Sle", FormMethod.Post)) {          
            <input type="submit" value="Solve" />
        }
        @using (Html.BeginForm("Clear", "Sle", FormMethod.Post)) {
            <input type="submit" value="Clear" />
        }

    </div>
</body>
</html>
